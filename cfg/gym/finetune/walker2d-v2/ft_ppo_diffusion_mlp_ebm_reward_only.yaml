defaults:
  - _self_

hydra:
  run:
    dir: ${logdir}

_target_: agent.finetune.train_ppo_diffusion_ebm_agent.TrainPPODiffusionEBMAgent

name: ${env_name}_ppo_diffusion_mlp_ebm_reward_only_ta${horizon_steps}_td${denoising_steps}_tdf${ft_denoising_steps}
logdir: ${oc.env:DPPO_LOG_DIR}/gym-finetune/${name}/${now:%Y-%m-%d}_${now:%H-%M-%S}_${seed}
base_policy_path: ${oc.env:DPPO_LOG_DIR}/gym-pretrain/walker2d-medium-v2_pre_diffusion_mlp_ta4_td20/2024-06-12_23-06-12/checkpoint/state_3000.pt
normalization_path: ${oc.env:DPPO_DATA_DIR}/gym/${env_name}/normalization.npz

seed: 42
device: cuda:0
env_name: walker2d-medium-v2
obs_dim: 17
action_dim: 6
denoising_steps: 20
ft_denoising_steps: 20
cond_steps: 1
horizon_steps: 4
act_steps: 4

env:
  n_envs: 40
  name: ${env_name}
  max_episode_steps: 1000
  reset_at_iteration: False
  save_video: False
  best_reward_threshold_for_success: 3  # success rate not relevant for gym tasks
  wrappers:
    mujoco_locomotion_lowdim:
      normalization_path: ${normalization_path}
    multi_step:
      n_obs_steps: ${cond_steps}
      n_action_steps: ${act_steps}
      max_episode_steps: ${env.max_episode_steps}
      reset_within_step: True

wandb:
  entity: ${oc.env:DPPO_WANDB_ENTITY}
  project: gym-${env_name}-finetune-ebm
  run: ${name}_EBM_Reward_Only
  group: ${oc.env:WANDB_GROUP,${env_name}-ebm-reward-replacement}
  tags: [DPPO+EBM-Reward-Only]

train:
  n_train_itr: 1000
  n_critic_warmup_itr: 0
  n_steps: 500
  gamma: 0.99
  actor_lr: 1e-4
  actor_weight_decay: 0
  actor_lr_scheduler:
    first_cycle_steps: 1000
    warmup_steps: 10
    min_lr: 1e-4
  critic_lr: 1e-3
  critic_weight_decay: 0
  critic_lr_scheduler:
    first_cycle_steps: 1000
    warmup_steps: 10
    min_lr: 1e-3
  save_model_freq: 100
  val_freq: 10
  render:
    freq: 1
    num: 0
  # PPO specific
  reward_scale_running: True
  reward_scale_const: 1.0
  gae_lambda: 0.95
  batch_size: 50000
  update_epochs: 5
  vf_coef: 0.5
  target_kl: 1

model:
  _target_: model.diffusion.diffusion_ppo_ebm.PPODiffusionEBM

  # Standard PPO parameters
  gamma_denoising: 0.99
  clip_ploss_coef: 0.01
  clip_ploss_coef_base: 0.01
  clip_ploss_coef_rate: 3
  randn_clip_value: 3
  min_sampling_denoising_std: 0.1
  min_logprob_denoising_std: 0.1

  # Disable PBRS - we only want EBM reward replacement
  use_ebm_reward_shaping: False
  
  # Enable energy scaling for better calibration
  use_energy_scaling: True
  energy_scaling_momentum: 0.99
  energy_scaling_eps: 1e-6
  energy_scaling_use_mad: True

  # EBM scalar reward (COMPLETELY replaces env reward)
  use_ebm_reward: True
  ebm_reward_mode: k0  # Use only final denoising step (k=0) for reward
  ebm_reward_clip_u_max: 5.0  # Clip utility values to prevent instability
  ebm_reward_use_mad: True  # Use MAD for robust scaling
  ebm_reward_lambda: 2.0  # Scale factor for EBM rewards
  ebm_reward_lambda_per_k: null  # Use uniform scaling
  ebm_reward_baseline_M: 8  # Number of baseline samples
  ebm_reward_baseline_use_mu_only: False  # Use stochastic baseline

  # Simple MLP EBM configuration
  ebm:
    _target_: model.ebm.simple_mlp_ebm.EBMWrapper
    obs_dim: ${obs_dim}
    action_dim: ${action_dim}
    horizon_steps: ${horizon_steps}
    hidden_dims: [512, 256, 128]  # Larger network for better capacity
    activation: "gelu"  # GELU activation for better performance
    use_layer_norm: True
    dropout: 0.1
    use_time_embedding: True
    max_timesteps: 1000
    max_denoising_steps: ${ft_denoising_steps}
    model_type: "simple_mlp"

  # EBM checkpoint path (you need to train this first or use pre-trained)
  ebm_ckpt_path: /linting-slow-vol/DPPO-EBM/checkpoints/simple_mlp_ebm_walker2d.pt

  # Network configuration
  network_path: ${base_policy_path}
  actor:
    _target_: model.diffusion.mlp_diffusion.DiffusionMLP
    time_dim: 16
    mlp_dims: [512, 512, 512]
    activation_type: ReLU
    residual_style: True
    cond_dim: ${eval:'${obs_dim} * ${cond_steps}'}
    horizon_steps: ${horizon_steps}
    action_dim: ${action_dim}
  critic:
    _target_: model.common.critic.CriticObs
    cond_dim: ${eval:'${obs_dim} * ${cond_steps}'}
    mlp_dims: [256, 256, 256]
    activation_type: Mish
    residual_style: True

  ft_denoising_steps: ${ft_denoising_steps}
  horizon_steps: ${horizon_steps}
  obs_dim: ${obs_dim}
  action_dim: ${action_dim}
  denoising_steps: ${denoising_steps}
  device: ${device}