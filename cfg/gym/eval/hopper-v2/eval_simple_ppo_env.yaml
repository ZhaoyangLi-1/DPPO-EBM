defaults:
  - _self_

hydra:
  run:  
    dir: ${logdir}

_target_: agent.finetune.eval.eval_simple_ppo_agent.EvalSimplePPOAgent

name: ${env_name}_eval_simple_ppo_env_ta${horizon_steps}
logdir: ${oc.env:DPPO_LOG_DIR}/gym-eval/${name}/${now:%Y-%m-%d}_${now:%H-%M-%S}_${seed}

# Model checkpoint path - UPDATE THIS to your trained model
model_path: ${oc.env:DPPO_LOG_DIR}/gym-finetune/hopper-medium-v2_simple_mlp_ppo_env_ta4/YOUR_EXPERIMENT_DATE/checkpoint/state_199.pt

seed: 42
device: cuda:0
env_name: hopper-medium-v2
obs_dim: 11
action_dim: 3
cond_steps: 1
horizon_steps: 4
act_steps: 4

# Evaluation configuration
n_steps: 5000  # Total evaluation steps
render_num: 0  # Number of environments to render
use_ebm_reward: False  # Environment rewards only

env:
  n_envs: 40
  name: ${env_name}
  max_episode_steps: 1000
  reset_at_iteration: False
  save_video: False
  best_reward_threshold_for_success: 3600  # For success rate calculation
  wrappers:
    mujoco_locomotion_lowdim:
      normalization_path: ${oc.env:DPPO_DATA_DIR,${hydra:runtime.cwd}/data}/gym/${env_name}/normalization.npz
    multi_step:
      n_obs_steps: ${cond_steps}
      n_action_steps: ${act_steps}
      max_episode_steps: ${env.max_episode_steps}
      reset_within_step: True

# Model configuration - should match training config
model:
  _target_: model.rl.simple_mlp_ppo.SimpleMLP_PPO
  
  # PPO parameters
  clip_ploss_coef: 0.2
  clip_vloss_coef: 0.2
  norm_adv: True
  
  # Reward configuration - Environment only
  use_ebm_reward: False
  ebm_reward_scale: 1.0
  ebm_reward_clip_max: 60.0
  use_auto_scaling: False
  
  # Network configuration
  actor:
    _target_: model.common.mlp_gaussian.Gaussian_MLP
    action_dim: ${action_dim}
    horizon_steps: ${horizon_steps}
    cond_dim: 11  # ${obs_dim} * ${cond_steps} = 11 * 1
    mlp_dims: [256, 256, 256]
    activation_type: ReLU
    tanh_output: True
    residual_style: False
    use_layernorm: False
    dropout: 0.1
    fixed_std: null
    learn_fixed_std: False
    std_min: 0.01
    std_max: 1.0
    
  critic:
    _target_: model.common.critic.CriticObs
    cond_dim: 11  # ${obs_dim} * ${cond_steps} = 11 * 1
    mlp_dims: [256, 256, 256]
    activation_type: ReLU
    residual_style: False

  horizon_steps: ${horizon_steps}
  obs_dim: ${obs_dim}
  action_dim: ${action_dim}
  device: ${device}