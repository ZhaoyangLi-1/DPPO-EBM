defaults:
  - _self_
hydra:
  run:
    dir: ${logdir}
_target_: agent.finetune.train_fdpp_diffusion_agent.TrainFDPPDiffusionAgent

# FDPP Configuration for Stack task (from MimicGen)
name: ${env_name}_fdpp_diffusion_kl${kl_weight}_pref${preference_type}_ta${horizon_steps}_td${denoising_steps}
logdir: ${oc.env:DPPO_LOG_DIR}/fdpp-finetune/${name}/${now:%Y-%m-%d}_${now:%H-%M-%S}_${seed}
base_policy_path: ${oc.env:DPPO_LOG_DIR}/stack-pretrain/checkpoint/pretrained_diffusion.pt
normalization_path: ${oc.env:DPPO_DATA_DIR}/stack/normalization.npz

seed: 42
device: cuda:0
env_name: stack
preference_type: align  # Options: 'dist' for STACK-DIST, 'align' for STACK-ALIGN
obs_dim: 14  # Low-dimensional state for Panda robot
action_dim: 7  # 7-DoF joint angles
denoising_steps: 100
ft_denoising_steps: 50
cond_steps: 2  # Use 2 steps of history for better context
horizon_steps: 16
act_steps: 8

# FDPP specific parameters
use_preference_reward: True
kl_weight: 0.02  # Slightly higher for stack task
preference_buffer_size: 20000
preference_batch_size: 512
preference_lr: 3e-4
preference_update_freq: 5
n_preference_epochs: 5
use_trajectory_reward: True  # Use trajectory-level rewards for manipulation
preference_hidden_dims: [512, 512, 256]
preference_activation: relu
preference_output_activation: tanh
use_action_in_reward: True  # Include actions in reward computation

env:
  n_envs: 20  # Fewer envs for complex manipulation
  name: ${env_name}
  max_episode_steps: 300
  reset_at_iteration: True
  save_video: True
  best_reward_threshold_for_success: 0.8
  save_full_observations: True
  wrappers:
    multi_step:
      n_obs_steps: ${cond_steps}
      n_action_steps: ${act_steps}
      max_episode_steps: ${env.max_episode_steps}
      pass_full_observations: ${env.save_full_observations}
      reset_within_step: False

wandb:
  entity: ${oc.env:DPPO_WANDB_ENTITY}
  project: fdpp-${env_name}-${preference_type}-finetune
  run: ${now:%H-%M-%S}_${name}

train:
  n_train_itr: 200  # More iterations for complex task
  n_critic_warmup_itr: 5
  n_steps: ${eval:'round(${env.max_episode_steps} / ${act_steps})'}
  gamma: 0.99
  actor_lr: 5e-6  # Lower learning rate for stability
  actor_weight_decay: 1e-4
  actor_lr_scheduler:
    first_cycle_steps: 200
    warmup_steps: 20
    min_lr: 1e-6
  critic_lr: 5e-4
  critic_weight_decay: 1e-4
  critic_lr_scheduler:
    first_cycle_steps: 200
    warmup_steps: 20
    min_lr: 5e-5
  save_model_freq: 20
  val_freq: 10
  force_train: False
  render:
    freq: 10
    num: 3
  # PPO specific
  reward_scale_running: True
  reward_scale_const: 0.1  # Scale down rewards for stability
  gae_lambda: 0.97  # Higher for longer horizon
  batch_size: ${eval:'round(${train.n_steps} * ${env.n_envs} * ${ft_denoising_steps} / 4)'}
  update_epochs: 5  # Fewer updates for stability
  vf_coef: 0.5
  target_kl: 0.005  # Tighter KL constraint
  clip_ratio: 0.1  # Smaller clipping for stability

model:
  _target_: model.diffusion.diffusion_ppo.PPODiffusion
  # Diffusion specific parameters
  gamma_denoising: 0.98
  clip_ploss_coef: 0.05  # More conservative clipping
  clip_ploss_coef_base: 0.05
  clip_ploss_coef_rate: 1
  randn_clip_value: 3
  min_sampling_denoising_std: 0.05
  min_logprob_denoising_std: 0.05
  learn_eta: True  # Learn eta for better adaptation
  eta_lr: 1e-5
  eta_weight_decay: 1e-4
  eta_update_interval: 50
  eta_lr_scheduler:
    first_cycle_steps: 200
    warmup_steps: 20
    min_lr: 1e-6
  # Network architecture
  network_path: ${base_policy_path}
  actor:
    _target_: model.diffusion.mlp_diffusion.DiffusionMLP
    time_dim: 32
    mlp_dims: [512, 512, 512, 256]  # Deeper network for complex task
    activation_type: ReLU
    residual_style: True
    cond_dim: ${eval:'${obs_dim} * ${cond_steps}'}
    horizon_steps: ${horizon_steps}
    action_dim: ${action_dim}
  critic:
    _target_: model.common.critic.CriticObs
    cond_dim: ${eval:'${obs_dim} * ${cond_steps}'}
    mlp_dims: [512, 512, 256]
    activation_type: Mish
    residual_style: True
  ft_denoising_steps: ${ft_denoising_steps}
  horizon_steps: ${horizon_steps}
  obs_dim: ${obs_dim}
  action_dim: ${action_dim}
  denoising_steps: ${denoising_steps}
  device: ${device}